@Enumeration(DataKind [Int16 Int16Complex Float32 Float32Complex])
@Enumeration(DecodeMode [None Hadamard Walsh])
@Enumeration(RCAOrientation [None Rows Columns])
@Enumeration(SamplingMode [2X 4X])

@Table([name pretty_name fixed_transmits]) AcquisitionKind
{
	[FORCES         FORCES         1]
	[UFORCES        UFORCES        0]
	[HERCULES       HERCULES       1]
	[RCA_VLS        VLS            0]
	[RCA_TPW        TPW            0]
	[UHERCULES      UHERCULES      0]
	[RACES          RACES          1]
	[EPIC_FORCES    EPIC-FORCES    1]
	[EPIC_UFORCES   EPIC-UFORCES   0]
	[EPIC_UHERCULES EPIC-UHERCULES 0]
	[Flash          Flash          0]
	[HERO_PA        HERO-PA        0]
}

@Table([name]) InterpolationMode
{
	[Nearest]
	[Linear]
	[Cubic]
}

@Expand(AcquisitionKind)   @Enumeration(AcquisitionKind `$(name)`)
@Expand(InterpolationMode) @Enumeration(InterpolationMode `$(name)`)

@Emit
{
	`read_only global u8 beamformer_acquisition_kind_has_fixed_transmits[] = {`
	@Expand(AcquisitionKind) `	$(fixed_transmits),`
	`};`
}

@Emit
{
	`read_only global s8 beamformer_acquisition_kind_strings[] = {`
	@Expand(AcquisitionKind) `	s8_comp("$(pretty_name)"),`
	`};`
}

@Emit
{
	`read_only global s8 beamformer_interpolation_mode_strings[] = {`
	@Expand(InterpolationMode) `	s8_comp("$(name)"),`
	`};`
}

@ShaderGroup Compute
{
	@Shader CudaDecode
	@Shader CudaHilbert

	@Shader(decode.glsl) Decode
	{
		@Enumeration(DataKind)
		@Enumeration(DecodeMode)
		@Flags([DilateOutput])

		@Bake
		{
			@BakeInt(DecodeMode           decode_mode           )
			@BakeInt(InputChannelStride   input_channel_stride  )
			@BakeInt(InputSampleStride    input_sample_stride   )
			@BakeInt(InputTransmitStride  input_transmit_stride )
			@BakeInt(OutputChannelStride  output_channel_stride )
			@BakeInt(OutputSampleStride   output_sample_stride  )
			@BakeInt(OutputTransmitStride output_transmit_stride)
			@BakeInt(TransmitCount        transmit_count        )
		}
	}

	@Shader(filter.glsl) Filter
	{
		@Enumeration(DataKind)
		@Enumeration(SamplingMode)
		@Flags([ComplexFilter MapChannels])

		@Bake
		{
			@BakeInt(DecimationRate       decimation_rate       )
			@BakeInt(FilterLength         filter_length         )
			@BakeInt(InputChannelStride   input_channel_stride  )
			@BakeInt(InputSampleStride    input_sample_stride   )
			@BakeInt(InputTransmitStride  input_transmit_stride )
			@BakeInt(OutputChannelStride  output_channel_stride )
			@BakeInt(OutputSampleStride   output_sample_stride  )
			@BakeInt(OutputTransmitStride output_transmit_stride)
			@BakeInt(SamplingMode         sampling_mode         )
			@BakeFloat(DemodulationFrequency demodulation_frequency)
			@BakeFloat(SamplingFrequency     sampling_frequency    )
		}

		@SubShader Demodulate
	}

	@Shader(das.glsl) DAS
	{
		@Enumeration(AcquisitionKind)
		@Enumeration(DataKind)
		@Enumeration(InterpolationMode)
		@Enumeration(RCAOrientation)
		@Flags([Fast Sparse CoherencyWeighting SingleFocus SingleOrientation])

		@Bake
		{
			@BakeInt(AcquisitionCount           acquisition_count           )
			@BakeInt(AcquisitionKind            acquisition_kind            )
			@BakeInt(ChannelCount               channel_count               )
			@BakeInt(InterpolationMode          interpolation_mode          )
			@BakeInt(SampleCount                sample_count                )
			@BakeInt(TransmitReceiveOrientation transmit_receive_orientation)

			@BakeFloat(DemodulationFrequency demodulation_frequency)
			@BakeFloat(FNumber               f_number              )
			@BakeFloat(FocusDepth            focus_depth           )
			@BakeFloat(SamplingFrequency     sampling_frequency    )
			@BakeFloat(SpeedOfSound          speed_of_sound        )
			@BakeFloat(TimeOffset            time_offset           )
			@BakeFloat(TransmitAngle         transmit_angle        )
		}
	}

	@Shader(min_max.glsl) MinMax
	@Shader(sum.glsl) Sum
}

@ShaderGroup Render
{
	@Shader(render_3d.frag.glsl) Render3D
}
